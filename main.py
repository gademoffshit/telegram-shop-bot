from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime
import logging
import os
import json
from dotenv import load_dotenv
import asyncio
import uuid

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token='5037002755:AAH0SdUBgoGG27O3Gm6BS31cOKE286e3Oqo')
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# URL –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
WEBAPP_URL = "https://gademoffshit.github.io/telegram-shop-bot/"

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 7356161144

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
orders_data = {}
pending_orders = {}
admin_referral_stats = {}
admin_ref_usernames = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class PaymentStates(StatesGroup):
    waiting_for_receipt = State()

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–≤–∏—Ç–∞–Ω—Ü–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists('receipts'):
    os.makedirs('receipts')

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    buttons = [
        [{"text": "üõç –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", "web_app": {"url": WEBAPP_URL}}],
        [{"text": "‚ùì –ü–æ–º–æ—â—å", "callback_data": "help"}],
        [{"text": "‚ÑπÔ∏è –û –Ω–∞—Å", "callback_data": "about_us"}]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

def get_payment_keyboard():
    """–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    buttons = [
        [{"text": "Monobank", "callback_data": "pay_mono"}],
        [{"text": "Blik", "callback_data": "pay_blik"}],
        [{"text": "Crypto trc-20", "callback_data": "pay_crypto"}],
        [{"text": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü–∏—é", "callback_data": "send_receipt"}],
        [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_order"}]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    buttons = [
        [
            {"text": "–í—Å–µ –∑–∞–∫–∞–∑—ã", "callback_data": "all_orders"},
            {"text": "–û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã", "callback_data": "waiting_orders"}
        ],
        [
            {"text": "–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ", "callback_data": "paid_orders"},
            {"text": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ", "callback_data": "shipped_orders"}
        ]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

def get_order_keyboard(order_id: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    buttons = [
        [
            {"text": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "callback_data": f"accept_{order_id}"},
            {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": f"reject_{order_id}"}
        ],
        [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_orders"}]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

def generate_order_id():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
    return str(uuid.uuid4())

def create_order(user_id, order_data):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ order_data –∏–º–µ–µ—Ç –Ω—É–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    required_fields = ['name', 'surname', 'phone', 'email', 'telegram', 'address', 'items', 'total']
    if not all(field in order_data for field in required_fields):
        raise ValueError("order_data is missing required fields")

    order_id = str(uuid.uuid4())[:8]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
    order = {
        'order_id': order_id,
        'user_id': user_id,
        'order_data': order_data,
        'status': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
        'details': order_data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
    }
    orders_data[order_id] = order
    return order_id

def send_order_confirmation_to_user(user_id, order_id):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    message = f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n\n–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ —ñ —Å–∫–æ—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n–û—á—ñ–∫—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–º–µ—Ä–æ–º –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è.\n–í–∞—à –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_id}"
    bot.send_message(chat_id=user_id, text=message)

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if str(message.from_user.id) == str(ADMIN_ID):
        await message.answer(
            "üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
    else:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

@dp.callback_query(lambda c: c.data == "help")
async def process_help(callback: types.CallbackQuery):
    help_text = (
        "üõç <b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:</b>\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã\n"
        "3. –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑\n"
        "4. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n"
        "5. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é\n\n"
        "‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏—Ç–µ: @odnorazki_wrot"
    )
    await callback.message.edit_text(
        help_text,
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "about_us")
async def process_about(callback: types.CallbackQuery):
    about_text = (
        "üè™ <b>–û –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ</b>\n\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —à–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.\n\n"
        "‚úÖ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞\n"
        "‚úÖ –ù–∞–¥–µ–∂–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞\n"
        "‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞\n"
        "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n"
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: @odnorazki_wro"
    )
    await callback.message.edit_text(
        about_text,
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "confirm_order")
async def process_confirm_order(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
        await callback.message.edit_reply_markup(reply_markup=None)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = callback.message.text
        print(f"Processing message: {message_text}")

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ —Ç–µ–≥–∞—Ö
        start_tag = '<json>'
        end_tag = '</json>'
        start_index = message_text.find(start_tag)
        end_index = message_text.find(end_tag)

        if start_index != -1 and end_index != -1:
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ JSON –≤ —Ç–µ–≥–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            json_text = message_text[start_index + len(start_tag):end_index]
            order_data = json.loads(json_text)
        else:
            # –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–≥–∞—Ö, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            print("JSON tags not found, parsing message text")
            lines = message_text.split('\n')
            order_data = {
                'name': '',
                'surname': '',
                'phone': '',
                'email': '',
                'telegram': '',
                'address': '',
                'items': [],
                'total': 0,
                'deliveryPrice': 0
            }

            for line in lines:
                try:
                    line = line.strip()
                    if "–Ü–º'—è:" in line:
                        order_data['name'] = line.split("–Ü–º'—è:")[1].strip()
                    elif "–ü—Ä—ñ–∑–≤–∏—â–µ:" in line:
                        order_data['surname'] = line.split("–ü—Ä—ñ–∑–≤–∏—â–µ:")[1].strip()
                    elif "–¢–µ–ª–µ—Ñ–æ–Ω:" in line:
                        order_data['phone'] = line.split("–¢–µ–ª–µ—Ñ–æ–Ω:")[1].strip()
                    elif "Email:" in line:
                        order_data['email'] = line.split("Email:")[1].strip()
                    elif "Telegram:" in line:
                        order_data['telegram'] = line.split("@")[1].strip() if "@" in line else ""
                    elif "–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:" in line:
                        order_data['address'] = line.split("–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:")[1].strip()
                    elif "‚Ä¢" in line and "—à—Ç" in line:
                        try:
                            # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                            item_info = line.replace('‚Ä¢', '').strip()
                            name_parts = item_info.split(' - ')
                            if len(name_parts) >= 2:
                                name = name_parts[0].strip()
                                quantity_part = name_parts[1].split('—à—Ç')[0].strip()
                                quantity = int(quantity_part)
                                order_data['items'].append({
                                    "name": name,
                                    "quantity": quantity,
                                    "price": 0  # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                })
                        except Exception as e:
                            print(f"Error parsing item: {e}")
                    elif "–£—Å—å–æ–≥–æ:" in line:
                        try:
                            total = line.split('–£—Å—å–æ–≥–æ:')[1].replace('z≈Ç', '').strip()
                            order_data['total'] = float(total)
                        except Exception as e:
                            print(f"Error parsing total: {e}")
                except Exception as e:
                    print(f"Error parsing line '{line}': {e}")
                    continue

        print(f"Parsed order data: {order_data}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        user_id = callback.from_user.id
        order_id = create_order(user_id, order_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π!\n–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_id}\n\n"
            "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:",
            reply_markup=get_payment_keyboard()
        )
        await callback.answer("–ó–∞–∫–∞–∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π!")
        
    except Exception as e:
        print(f"Error processing order: {e}")
        print(f"Message text: {message_text if 'message_text' in locals() else 'Not available'}")
        await callback.message.answer(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {str(e)}")

@dp.callback_query(lambda c: c.data.startswith("pay_"))
async def process_payment(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    payment_method = callback.data.split("_")[1]
    payment_info = {
        "mono": "Monobank:\n4441 1144 5791 2777\n–û—Ç—Ä–∏–º—É–≤–∞—á: –ú–∞–∫—Å–∏–º",
        "blik": "Blik:\n799 799 799",
        "crypto": "TRC20 USDT:\nTW6yb9RoWxHxXkgZvPG7nGW8ZzWJmYCYts"
    }

    buttons = [
        [{"text": "‚úÖ –Ø —Å–ø–ª–∞—Ç–∏–≤", "callback_data": "payment_done"}],
        [{"text": "–ù–∞–∑–∞–¥", "callback_data": "back_to_payment"}]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(
        f"–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏:\n\n{payment_info[payment_method]}\n\n"
        "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–Ø —Å–ø–ª–∞—Ç–∏–≤'",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "payment_done")
async def process_payment_confirmation(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–≤–∏—Ç–∞–Ω—Ü–∏—é
    await callback.message.edit_text(
        "‚ùóÔ∏è –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü–∏—é.\n\n"
        "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ.\n"
        "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: jpg, png, pdf",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [{"text": "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü–∏—é", "callback_data": "send_receipt"}],
            [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "callback_data": "back_to_payment"}]
        ])
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_payment")
async def back_to_payment(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "operator_chat")
async def operator_chat(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —á–∞—Ç–∞ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    await callback.message.answer(
        "–ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "help")
async def help_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    help_text = (
        "üõç –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É'\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã\n"
        "3. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É\n"
        "4. –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑\n\n"
        "‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ß–∞—Ç –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'"
    )
    await callback.message.answer(help_text)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "about_us")
async def send_about_us(callback: types.CallbackQuery):
    about_text = (
        "–ü—Ä–æ –Ω–∞—Å Vape Room\n\n"
        "–ú–∏ ‚Äì –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏—Ö —Å–∏–≥–∞—Ä–µ—Ç, —Ä—ñ–¥–∏–Ω –¥–ª—è –ø–æ–¥—ñ–≤ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤. "
        "–í–∂–µ 3,5 —Ä–æ–∫–∏ –Ω–∞ —Ä–∏–Ω–∫—É, –∑–∞ —Ü–µ–π —á–∞—Å –º–∏ –æ–±—Ä–æ–±–∏–ª–∏ –ø–æ–Ω–∞–¥ 3000 –∑–∞–º–æ–≤–ª–µ–Ω—å —Ç–∞ –æ—Ç—Ä–∏–º–∞–ª–∏ "
        "–ø–æ–Ω–∞–¥ 1500 —Ä–µ–∞–ª—å–Ω–∏—Ö –≤—ñ–¥–≥—É–∫—ñ–≤ –≤—ñ–¥ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤.\n\n"
        "–ß–æ–º—É –æ–±–∏—Ä–∞—é—Ç—å –Ω–∞—Å?\n\n"
        "‚úÖ –®–≤–∏–¥–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ ‚Äì –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ —ñ–Ω—à–∏—Ö –º—ñ—Å—Ç –∑ –¥–æ—Å—Ç–∞–≤–∫–æ—é –∑–∞ 1-2 –¥–Ω—ñ.\n"
        "–Ñ —Å—É–º–Ω—ñ–≤–∏? –ù–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É —Ç–∞ –æ—Ç—Ä–∏–º–∞–π—Ç–µ –≤—ñ–¥–µ–æ—Ñ—ñ–∫—Å–∞—Ü—ñ—é –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n"
        "‚úÖ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ ‚Äì –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –ø—Ä–æ—Ç—è–≥–æ–º 10-15 —Ö–≤–∏–ª–∏–Ω.\n"
        "‚úÖ –ì–Ω—É—á–∫–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–Ω–∏–∂–æ–∫ ‚Äì –ø–æ—Å—Ç—ñ–π–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏ –æ—Ç—Ä–∏–º—É—é—Ç—å –≤–∏–≥—ñ–¥–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.\n"
        "‚úÖ –ì—É—Ä—Ç–æ–≤–∞ —Ç–æ—Ä–≥—ñ–≤–ª—è ‚Äì –ø—Ä–∞—Ü—é—î–º–æ –∑ –≤–µ–ª–∏–∫–∏–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏.\n\n"
        "–ù–∞—à–∞ –º–µ—Ç–∞ ‚Äì –Ω–∞–¥–∞—Ç–∏ —è–∫—ñ—Å–Ω–∏–π —Å–µ—Ä–≤—ñ—Å —Ç–∞ –Ω–∞–π–∫—Ä–∞—â–∏–π –≤–∏–±—ñ—Ä –ø—Ä–æ–¥—É–∫—Ü—ñ—ó –¥–ª—è –≤–µ–π–ø—ñ–Ω–≥—É. "
        "–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ Vape Room —Ç–∞ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —Å–∞–º—ñ!"
    )
    
    buttons = [[{"text": "üõç –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "web_app": {"url": WEBAPP_URL}}]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.answer(about_text, reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "main_menu")
async def process_main_menu(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"Error deleting message: {e}")

    await callback.message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data in ["all_orders", "waiting_orders", "paid_orders", "shipped_orders"])
async def process_order_filter(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"Error deleting message: {e}")

    status_map = {
        "all_orders": None,  # None –æ–∑–Ω–∞—á–∞–µ—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã
        "waiting_orders": "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
        "paid_orders": "–û–ø–ª–∞—á–µ–Ω",
        "shipped_orders": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω"
    }
    
    selected_status = status_map.get(callback.data)
    title = "–í—Å–µ –∑–∞–∫–∞–∑—ã" if callback.data == "all_orders" else f"–ó–∞–∫–∞–∑—ã: {selected_status}"
    orders_list = f"üìã {title}:\n\n"
    
    buttons = []
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã
    filtered_orders = {
        order_id: order for order_id, order in orders_data.items()
        if (selected_status is None or order['status'] == selected_status)
        and order['status'] != '–û—Ç–∫–ª–æ–Ω–µ–Ω'  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    }
    
    for order_id, order in filtered_orders.items():
        button_text = f"–ó–∞–∫–∞–∑ #{order_id} - {order['status']}"
        buttons.append([{"text": button_text, "callback_data": f"view_order_{order_id}"}])
    
    buttons.append([
        {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback_data": callback.data},
        {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "main_menu"}
    ])
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    
    if not filtered_orders:
        orders_list += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"
    
    await callback.message.answer(orders_list, reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith('view_order_'))
async def process_view_order(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞"""
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"Error deleting message: {e}")

    order_id = callback.data.replace('view_order_', '')
    order = orders_data.get(order_id)
    
    if order:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
        details = order['details']
        formatted_details = (
            f"üì¶ –ó–∞–∫–∞–∑ #{order_id}\n\n"
            f"–°—Ç–∞—Ç—É—Å: {order['status']}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order['user_id']}\n\n"
            f"–ò–º—è: {details['name']}\n"
            f"–§–∞–º–∏–ª–∏—è: {details['surname']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {details['phone']}\n"
            f"Email: {details['email']}\n"
            f"Telegram: @{details['telegram']}\n"
            f"–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {details['address']}\n\n"
            f"–¢–æ–≤–∞—Ä—ã: {', '.join(item['name'] for item in details['items'])}\n"
            f"–°—É–º–º–∞: {details['total']} z≈Ç\n"
        )
        
        await callback.message.answer(
            formatted_details,
            reply_markup=get_order_keyboard(order_id)
        )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith(('accept_', 'reject_')))
async def process_order_action(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"Error deleting message: {e}")

    action, order_id = callback.data.split('_')
    order = orders_data.get(order_id)
    
    if order:
        if action == 'accept':
            order['status'] = '–ü—Ä–∏–Ω—è—Ç'
            await bot.send_message(
                chat_id=order['user_id'],
                text=f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω!"
            )
        else:
            order['status'] = '–û—Ç–∫–ª–æ–Ω–µ–Ω'
            await bot.send_message(
                chat_id=order['user_id'],
                text=f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω."
            )
        
        buttons = [[
            {"text": "üîô –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤", "callback_data": "all_orders"},
            {"text": "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}
        ]]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.answer(
            f"–ó–∞–∫–∞–∑ #{order_id} {order['status'].lower()}",
            reply_markup=keyboard
        )
    await callback.answer()

@dp.callback_query(lambda c: c.data == 'send_receipt')
async def request_receipt(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(PaymentStates.waiting_for_receipt)
    await callback_query.message.edit_text(
        "üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ.\n"
        "‚ùóÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: jpg, png, pdf\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel"
    )

@dp.message(lambda message: message.content_type in ['document', 'photo'], PaymentStates.waiting_for_receipt)
async def handle_receipt(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        user_folder = f'receipts/{user_id}'
        if not os.path.exists(user_folder):
            os.makedirs(user_folder)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        if message.document:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            file_ext = os.path.splitext(message.document.file_name)[1].lower()
            if file_ext not in ['.jpg', '.jpeg', '.png', '.pdf']:
                await message.reply(
                    "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ jpg, png –∏–ª–∏ pdf."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            file_id = message.document.file_id
            file = await bot.get_file(file_id)
            file_path = f"{user_folder}/{timestamp}{file_ext}"
            await bot.download_file(file.file_path, file_path)
            
        elif message.photo:
            # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            photo = message.photo[-1]
            file_id = photo.file_id
            file = await bot.get_file(file_id)
            file_path = f"{user_folder}/{timestamp}.jpg"
            await bot.download_file(file.file_path, file_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_message = (
            f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–≤–∏—Ç–∞–Ω—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ\n\n"
            f"üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.username or message.from_user.id}\n"
            f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_payment_{user_id}"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_payment_{user_id}")
        ]])
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω—É
        if message.document:
            await bot.send_document(ADMIN_ID, message.document.file_id, caption=admin_message, reply_markup=keyboard)
        else:
            await bot.send_photo(ADMIN_ID, photo.file_id, caption=admin_message, reply_markup=keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply(
            "‚úÖ –ö–≤–∏—Ç–∞–Ω—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
            "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –æ–ø–ª–∞—Ç—ã."
        )
        
        await state.clear()
        
    except Exception as e:
        logging.error(f"Error handling receipt: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await state.clear()

@dp.callback_query(lambda c: c.data.startswith('approve_payment_'))
async def approve_payment(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[2])
    
    await bot.send_message(
        user_id,
        "‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
    )
    
    await callback_query.message.edit_caption(
        callback_query.message.caption + "\n\n‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
        reply_markup=None
    )

@dp.callback_query(lambda c: c.data.startswith('reject_payment_'))
async def reject_payment(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[2])
    
    await bot.send_message(
        user_id,
        "‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ."
    )
    
    await callback_query.message.edit_caption(
        callback_query.message.caption + "\n\n‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω",
        reply_markup=None
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
